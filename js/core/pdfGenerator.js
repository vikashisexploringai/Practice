// js/core/pdfGenerator.js
import { CONFIG } from './config.js';

export class PDFGenerator {
    static generateWrongQuestionsPDF(reportData) {
        const { jsPDF } = window.jspdf;
        
        // Create new PDF document
        const doc = new jsPDF();
        const pageWidth = doc.internal.pageSize.getWidth();
        const margin = 20;
        let yPosition = margin;

        // Add header
        doc.setFontSize(20);
        doc.setFont('helvetica', 'bold');
        doc.text('Performance Review Report', pageWidth / 2, yPosition, { align: 'center' });
        yPosition += 15;

        // Add subtitle
        doc.setFontSize(12);
        doc.setFont('helvetica', 'normal');
        doc.text(`${reportData.theme} • ${reportData.mode} • Day ${reportData.day}`, pageWidth / 2, yPosition, { align: 'center' });
        yPosition += 10;

        // Add date and score
        doc.setFontSize(10);
        doc.text(`Generated on: ${reportData.date}`, margin, yPosition);
        doc.text(`Score: ${reportData.score}/${reportData.totalQuestions} (${reportData.accuracy}%)`, pageWidth - margin, yPosition, { align: 'right' });
        yPosition += 15;

        // Add separator line
        doc.setDrawColor(200, 200, 200);
        doc.line(margin, yPosition, pageWidth - margin, yPosition);
        yPosition += 20;

        // Add wrong questions section header
        doc.setFontSize(16);
        doc.setFont('helvetica', 'bold');
        doc.text('Questions to Review', margin, yPosition);
        yPosition += 10;

        doc.setFontSize(10);
        doc.setFont('helvetica', 'normal');
        doc.text(`You got ${reportData.wrongQuestions.length} question(s) wrong that need review:`, margin, yPosition);
        yPosition += 15;

        // Add each wrong question
        reportData.wrongQuestions.forEach((item, index) => {
            // Check if we need a new page
            if (yPosition > 250) {
                doc.addPage();
                yPosition = margin;
            }

            // Question number
            doc.setFontSize(12);
            doc.setFont('helvetica', 'bold');
            doc.text(`${index + 1}. ${item.question}`, margin, yPosition);
            yPosition += 8;

            // User's wrong answer
            doc.setFontSize(10);
            doc.setFont('helvetica', 'normal');
            doc.setTextColor(255, 0, 0); // Red for wrong answer
            doc.text(`Your answer: ${item.userAnswer}`, margin + 5, yPosition);
            yPosition += 6;

            // Correct answer
            doc.setTextColor(0, 128, 0); // Green for correct answer
            doc.text(`Correct answer: ${item.correctAnswer}`, margin + 5, yPosition);
            yPosition += 6;

            // Explanation
            doc.setTextColor(0, 0, 0); // Black for explanation
            const explanationLines = doc.splitTextToSize(`Explanation: ${item.explanation}`, pageWidth - (margin * 2));
            doc.text(explanationLines, margin + 5, yPosition);
            yPosition += (explanationLines.length * 5) + 10;

            // Separator line between questions
            if (index < reportData.wrongQuestions.length - 1) {
                doc.setDrawColor(200, 200, 200);
                doc.line(margin, yPosition, pageWidth - margin, yPosition);
                yPosition += 15;
            }
        });

        // Add footer
        const totalPages = doc.internal.getNumberOfPages();
        for (let i = 1; i <= totalPages; i++) {
            doc.setPage(i);
            doc.setFontSize(8);
            doc.setFont('helvetica', 'italic');
            doc.text(`Generated by Quiz App - Page ${i} of ${totalPages}`, pageWidth / 2, doc.internal.pageSize.getHeight() - 10, { align: 'center' });
        }

        // Save the PDF
        const fileName = `Wrong_Questions_${reportData.theme.replace(/\s+/g, '_')}_Day${reportData.day}.pdf`;
        doc.save(fileName);
    }
}
